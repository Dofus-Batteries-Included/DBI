name: Poll game update

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

jobs:
  job:
    name: Add tag if game has been updated
    runs-on: windows-latest
    concurrency: poll_game_update
    
    steps:
      - name: Fetch last release
        id: fetch_last_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{repository}/releases/latest
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read version from metadata file of last release
        id: fetch_last_release_version
        run: |
          $FileToDownload='release.zip'
          $ResponseString=@'
          ${{ steps.fetch_last_release.outputs.data }}
          '@
          $Response=($ResponseString | ConvertFrom-Json)
          $ReleaseAsset=($Response.assets | Where-Object {$_.name -eq $FileToDownload})[0]
          $Url=$ReleaseAsset.browser_download_url
          echo "Asset file: $Url"
          $null=Invoke-WebRequest -Uri "$Url" -OutFile $FileToDownload
          $null=7z x $FileToDownload -orelease
          
          if (!Test-Path 'release/DofusBatteriesIncluded/metadata.json') {
            $null=Write-Error "Could not find metadata file in last release." 
            exit 1
          }
          
          $Metadata=(Get-Content 'release/DofusBatteriesIncluded/metadata.json' | Out-String | ConvertFrom-Json)
          echo "Last release version: $(Metadata.GameVersion)"
          echo "version=$(Metadata.GameVersion)" >> $Env:GITHUB_OUTPUT

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Setup Github NPM registry for @dofus-batteries-included namespace
        run: |
          echo @dofus-batteries-included:registry=https://npm.pkg.github.com > ~/.npmrc
          echo //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }} >> ~/.npmrc

      - name: Install Cytrus v6
        run: npm i @dofus-batteries-included/cytrus-v6 -g

      - name: Read current game version
        id: fetch_dofus_version
        run: |
          $CytrusGameVersion=$(cytrus-v6 version -g dofus -b)
          $Version=$CytrusGameVersion.Split("_")[1]
          echo "Current game version: $Version"
          echo "dofus_version=$Version" >> $Env:GITHUB_OUTPUT

      - name: Stop when versions match
        if: ${{ steps.fetch_last_release_version.outputs.version == steps.fetch_dofus_version.outputs.dofus_version }}
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repository}/actions/runs/{run_id}/cancel
          repository: ${{ github.repository }}
          run_id: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for workflow cancellation
        if: ${{ steps.fetch_last_release_version.outputs.version == steps.fetch_dofus_version.outputs.dofus_version }}
        run: while ($True) { echo "Waiting for job to be cancelled"; sleep 5; }
        
      - name: Continue when versions don't match
        id: continue_when_versions_match
        run: |
          echo "Versions don't match: ${{ steps.fetch_last_release_version.outputs.version }} != ${{ steps.fetch_dofus_version.outputs.dofus_version }}."
          echo "Will add tag to last commit to trigger a new release."
          echo "create_new_tag=true" >> $Env:GITHUB_OUTPUT
        if: ${{ steps.fetch_last_release_version.outputs.version != steps.fetch_dofus_version.outputs.dofus_version }}

      - name: Checkout
        if: ${{ steps.continue_when_versions_match.outputs.create_new_tag }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: fetch_latest_tag
        if: ${{ steps.continue_when_versions_match.outputs.create_new_tag }}
        uses: WyriHaximus/github-action-get-previous-tag@v1

      - name: Bump version
        id: bump_version
        if: ${{ steps.continue_when_versions_match.outputs.create_new_tag }}
        run: |
          $Version="${{ steps.fetch_latest_tag.outputs.tag }}"
          $Regex="v(?<major>[0-9]+)\.(?<minor>[0-9]+)\.(?<patch>[0-9]+)(?<prerelease>-.*)?"
          if ($Version -notmatch $Regex) {
            throw "$Version is not a valid version number"
          }
          $Major=[Convert]::ToInt32($matches["major"])
          $Minor=[Convert]::ToInt32($matches["minor"])
          $Patch=[Convert]::ToInt32($matches["patch"])
          $Prerelease=$matches["prerelease"]
          
          echo "Found version: v$Major.$Minor.$Patch$Prerelease"
          
          $NewPatch=$Patch+1
          $BumpedVersion="v$Major.$Minor.$NewPatch$Prerelease"
          
          echo "Bumped version: $BumpedVersion"
          echo "new_version=$BumpedVersion" >> $Env:GITHUB_OUTPUT

      - name: Get last commit
        uses: octokit/request-action@v2.x
        id: fetch_last_commit
        if: ${{ steps.continue_when_versions_match.outputs.create_new_tag }}
        with:
          route: GET /repos/{repository}/commits
          repository: ${{ github.repository }}
          per_page: 1
          page: 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Get last commit ref
        id: fetch_last_commit_ref
        if: ${{ steps.continue_when_versions_match.outputs.create_new_tag }}
        run: |
          $ResponseString=@'
          ${{ steps.fetch_last_commit.outputs.data }}
          '@
          $Response=($ResponseString | ConvertFrom-Json)
          echo "Last commit: $($Response.Sha)"
          echo "ref=$($Response.Sha)" >> $Env:GITHUB_OUTPUT

      - name: Create release
        uses: octokit/request-action@v2.x
        id: create_release
        if: ${{ steps.continue_when_versions_match.outputs.create_new_tag }}
        with:
          route: POST /repos/{repository}/releases
          repository: ${{ github.repository }}
          tag_name: ${{ steps.bump_version.outputs.new_version }}
          target_commitish: ${{ steps.fetch_last_commit_ref.outputs.ref }}
          name: ${{ steps.bump_version.outputs.new_version }}
          body: |
            "AUTO-GENERATED: This release has been triggered by the update of the game to version ${{ steps.fetch_dofus_version.outputs.dofus_version }}."
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}

      - name: Display response of create tag request
        if: ${{ steps.continue_when_versions_match.outputs.create_new_tag }}
        run: |
          echo @'
            Status: ${{ steps.create_release.outputs.status }}
          
            Headers:
            ${{ steps.create_release.outputs.headers }}
          
            Data:
            ${{ steps.create_release.outputs.data }}
          '@

permissions:
  actions: write
  contents: write
  packages: read
